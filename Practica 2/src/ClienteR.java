import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;

import java.util.logging.Level;
import java.util.logging.Logger;
public class ClienteR extends javax.swing.JFrame implements Runnable {
    public int hora,min,seg;
    public boolean continua=false;
    Thread hilo;
    /**
     * Creates new form ClienteR
     */
   public ClienteR(String cliente) {
        this.setTitle(cliente); //mandar a llamar desde el socket server
        initComponents();
        setLocationRelativeTo(null); 
    }
    public ClienteR(){
        initComponents();
        this.setTitle("cliente");
        setLocationRelativeTo(null);
    }
    public static void conexionCliente() throws Exception{
        //IP del servidor
        final String HOST = "127.0.0.1";
        //Puerto del servidor
        final int PUERTO = 54321;
        DataInputStream in;
        DataOutputStream out;
        try {
            //Creo el socket para conectarme con el servidor 
            Socket sc = new Socket(HOST, PUERTO);
            System.out.println("Conectado a servidor");
            in = new DataInputStream(sc.getInputStream());
            out = new DataOutputStream(sc.getOutputStream());
            String miIP=sc.getLocalAddress().toString();
            ClienteR r=new ClienteR(miIP);
            r.setVisible(true);
            while(r.isShowing()){
                if (in.readUTF().equals("stop"))
                    r.detener();
                else
                    r.recibirHora(in);
            }
            sc.close();
            System.out.println("Desconectado");
        } catch (IOException ex) {
        System.out.println(ex);
        }
    }
    public void iniciar(){
        hilo=new Thread(this);
        continua=true;
        hilo.start();
    }
    public void run() {
        String tiempo;
        try {
            while (continua){
                tiempo="";
                if (this.hora<10)
                    tiempo+="0"+this.hora+":";
                else
                    tiempo+=this.hora+":";
                if (this.min<10)
                    tiempo+="0"+this.min+":";
                else
                    tiempo+=this.min+":";
                if (this.seg<10)
                    tiempo+="0"+this.seg;
                else
                    tiempo+=this.seg;                
                
                this.seg++;
                if(this.seg==60){
                    this.min++;
                    this.seg=0;
                    if(this.min==60){
                        this.hora++;
                        this.min=0;
                        if(this.hora==24){
                            this.hora=0;
                        }
                    }
                }
                time.setText(tiempo);
                Thread.sleep(1000);
            } 
         }catch (InterruptedException ex) {
                Logger.getLogger(ClienteR.class.getName()).log(Level.SEVERE, null, ex);
          }
 }
   public void detener() throws Exception{
        continua=false;
    }
    public void recibirHora(DataInputStream in) throws Exception{
        try {
            this.hora=Integer.parseInt(in.readUTF());
            this.min=Integer.parseInt(in.readUTF());
            this.seg=Integer.parseInt(in.readUTF());
            iniciar();
        } catch (IOException ex) {
            Logger.getLogger(ClienteR.class.getName()).log(Level.SEVERE, null, ex);
        }  
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        time = new javax.swing.JLabel();
        MiIP = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        time.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        time.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        time.setText("00:00:00");

        MiIP.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        MiIP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        MiIP.setText("Mi Reloj");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(time, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                    .addComponent(MiIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(MiIP)
                .addGap(29, 29, 29)
                .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        conexionCliente();
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClienteR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClienteR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClienteR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClienteR.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
      
        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteR().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel MiIP;
    private javax.swing.JLabel time;
    // End of variables declaration//GEN-END:variables
}
